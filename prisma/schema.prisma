generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// -------------------- Enums --------------------
enum Role {
  SUPER_ADMIN
  USER
}

enum BackgroundImageEntityType {
  PAGE
  SECTION
}

enum MediaEntityType {
  PAGE
  SECTION
  DOG
  COURSE
}

enum CourseStatus {
  Active
  Inactive
  Draft
  Premium
}

// -------------------- Core Auth Models --------------------
model User {
  id           String           @id @default(uuid())
  email        String           @unique
  username     String           @unique
  passwordHash String
  role         Role             @default(SUPER_ADMIN)
  isActive     Boolean          @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // authored/updated content (optional string mapping kept on entities for simplicity)
  // createdPages  Page[]     @relation("PageCreatedBy")
  // updatedPages  Page[]     @relation("PageUpdatedBy")
  passwordResetTokens PasswordResetToken[]
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  token     String   @unique
  email     String
  userId    String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([email])
  @@index([expiresAt])
}

// -------------------- Media --------------------
model Media {
  id         Int       @id @default(autoincrement())
  fileName   String
  fileUrl    String      // absolute or relative URL
  mimeType   String
  fileSize   Int?
  uploadedAt DateTime    @default(now())
  uploadedBy String?

  pageId Int? 
  page   Page? @relation(fields: [pageId], references: [id])

  sectionId Int?
  section   Section? @relation(fields: [sectionId], references: [id])

  dogId Int?
  dog   Dog? @relation(fields: [dogId], references: [id])
}

model Background_Image {
  id Int @id @default(autoincrement())
  fileUrl String
  fileName String
  mimeType String
  fileSize Int?

  pageId Int? @unique()
  page   Page? @relation(fields: [pageId], references: [id])

  sectionId Int? @unique()
  section   Section? @relation(fields: [sectionId], references: [id])

  dogId Int? @unique
  dog   Dog? @relation(fields: [dogId], references: [id])
}

model Background_Video {
  id Int @id @default(autoincrement())
  fileUrl String
  fileName String
  mimeType String
  fileSize Int?
  duration Int? // Video-specific: duration in seconds
  pageId Int? @unique()
  page   Page? @relation(fields: [pageId], references: [id])
  sectionId Int? @unique()
  section   Section? @relation(fields: [sectionId], references: [id])
}

// -------------------- Pages / Sections --------------------
model Page {
  id                 Int       @id @default(autoincrement())
  slug               String    @unique
  title              String
  description        String

  createdBy   String?
  updatedBy   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Optional FK authorship (not exposed in Swagger but handy internally)
  // createdById String?
  // createdUser User?     @relation("PageCreatedBy", fields: [createdById], references: [id], onDelete: SetNull)
  // updatedById String?
  // updatedUser User?     @relation("PageUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull)

  // Relations
  backgroundImage  Background_Image?
  backgroundVideo  Background_Video?
  sections         Section[]
  media            Media[]
}


model Section {
  id              Int       @id @default(autoincrement())
  pageId          Int
  page            Page      @relation(fields: [pageId], references: [id], onDelete: Cascade)
  title           String?
  content         Json?
  orderIndex      Int       @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  backgroundImage   Background_Image?
  backgroundVideo  Background_Video?
  media             Media[]
  @@unique([pageId, orderIndex])
  @@index([pageId])
}

// -------------------- Dogs & Training Programs --------------------
model Dog {
  id               Int       @id @default(autoincrement())
  name             String
  firstDescription String
  secondDescription String
  updatedBy        String?

  profileImage  Background_Image?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  media            Media[]
}

// -------------------- Courses --------------------
model Course {
  id               Int          @id @default(autoincrement())
  title            String
  description      String
  note String?
  topics           Json
  advancedTopics   Json
  createdBy String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
